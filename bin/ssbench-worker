#!/usr/bin/env python

#
#Copyright (c) 2012-2021, NVIDIA CORPORATION.
#SPDX-License-Identifier: Apache-2.0

import sys
import argparse
import logging

import ssbench
from ssbench.worker import Worker

if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='SwiftStack Benchmark (ssbench) version %s' % (
            ssbench.version,))
    arg_parser.add_argument('worker_id', type=int, help='An integer ID '
                            'number; must be unique among all workers')
    arg_parser.add_argument(
        '--zmq-host', type=str, default='127.0.0.1',
        help='Hostname or IP where ssbench-master may be reached')
    arg_parser.add_argument(
        '--zmq-work-port', type=int, default=13579,
        help='Must match the value given to ssbench-master')
    arg_parser.add_argument(
        '--zmq-results-port', type=int, default=13580,
        help='Must match the value given to ssbench-master')
    arg_parser.add_argument('-c', '--concurrency', type=int, default=64,
                            help='Maximum concurrency this worker will '
                            'provide.')
    arg_parser.add_argument('--retries', default=10, type=int,
                            help='Maximum number of times to retry a job.')
    arg_parser.add_argument(
        '--batch-size', metavar='COUNT', type=int, default=1,
        help='Send back bench results in batches of this size to '
        'increase benchmarking throughput; for best results, '
        'this should match the --batch-size specified in the ssbench-master '
        'command-line.')
    arg_parser.add_argument('-p', '--profile-count', type=int, metavar='COUNT',
                            default=0,
                            help='Profile %(metavar)s work jobs, starting '
                            'with the first.')
    arg_parser.add_argument('-v', '--verbose', action='store_true',
                            default=False, help='Enable more verbose output.')

    args = arg_parser.parse_args(sys.argv[1:])

    logging.basicConfig(level=logging.DEBUG if args.verbose else logging.INFO)
    if getattr(logging, 'captureWarnings', None):
        logging.captureWarnings(True)

    worker = Worker(args.zmq_host, args.zmq_work_port, args.zmq_results_port,
                    args.worker_id, args.retries,
                    profile_count=args.profile_count,
                    concurrency=args.concurrency, batch_size=args.batch_size)
    worker.go()
